{"version":3,"sources":["frontend.cljs"],"mappings":"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","names":["js/frontend","js/frontend.string1","frontend/string1","reagent.core.atom","js/frontend.string2","frontend/string2","js/frontend.result","frontend/result","p__26737","map__26738","cljs.core/--destructure-map","cljs.core.get","frontend/error-handler","status","status-text","js/console","frontend/event-value","e","frontend/url-generator","str1","str2","str1-len","cljs.core/count","str2-len","frontend/result-badge","result","cljs.core._EQ_","clojure.string/upper-case","cljs.core/deref","frontend/Application","reagent-mui.material.grid/grid","reagent-mui.material.text-field/text-field","cljs.core/reset!","reagent-mui.material.button/button","ajax.core.GET","response","reagent.dom.render","js/document.getElementById","frontend/init","cljs.core.println"],"sourcesContent":["\n(ns frontend\n  (:require [reagent.core :as r]\n            [ajax.core :refer [GET]]\n            [reagent-mui.material.grid :refer [grid]]\n            [reagent.dom :as dom]\n            [clojure.string :as str]\n            [reagent-mui.material.button :refer [button]]\n            [reagent-mui.material.text-field :refer [text-field]])\n  )\n\n(defonce string1 (r/atom \"\"))\n(defonce string2 (r/atom \"\"))\n(defonce result (r/atom \"\"))\n\n(defn error-handler [{:keys [status status-text]}]\n  (.log js/console (str \"something bad happened: \" status \" \" status-text)))\n\n(defn event-value\n  [e]\n  (.. e -target -value))\n\n(defn url-generator \n  \"If string2 is greater than string1 treat string2 as string1\"\n  [str1 str2]\n  (let [str1-len (count str1)\n        str2-len (count str2)\n        ]\n    (if (> str1-len str2-len)\n       (str \"scramble/\" str1 \"/\" str2)\n       (str \"scramble/\" str2 \"/\" str1)\n      )\n    )\n  )\n\n(defn result-badge\n  \"If result is true generate green badge, slse generate red badge\"\n  [result]\n  (cond\n    (= result \"true\") [:div {:style {:background-color \"#006400\" :color \"white\" :border-radius \"5px\" :padding-top \"10px\" :padding-bottom \"10px\"  :width \"100%\" :text-align \"center\"}} (str/upper-case result)]\n    (= result \"false\") [:div {:style {:background-color \"#800000\" :color \"white\" :border-radius \"5px\" :padding-top \"10px\" :padding-bottom \"10px\"  :width \"100%\" :text-align \"center\"}}(str/upper-case result)]\n    (or (= result \"Enter Input\") (= result  \"Contains Non-Alphabets Characters\")) [:div {:style {:background-color \"#D37506\" :color \"white\" :border-radius \"5px\" :padding-top \"10px\" :padding-bottom \"10px\"  :width \"100%\" :text-align \"center\"}}(str/upper-case result)]\n    )\n  )\n\n\n(defn Application []\n  [:div\n   [:h1 \"Scrambles\"]\n   [grid {:container true :spacing 1}\n    [grid {:item true :xs 2 }\n     [text-field\n     {:value       @string1\n      :label       \"String 1\"\n      :variant     \"outlined\"\n      :size        \"small\"\n      :on-change   (fn [e]\n                     (reset! string1 (event-value e)))}]\n     ]\n    [grid {:item true :xs 2}\n     [text-field\n     {:value       @string2\n      :label       \"String 2\"\n      :variant     \"outlined\"\n      :size        \"small\"\n      :on-change   (fn [e]\n                     (reset! string2 (event-value e)))}]\n     ]\n    [grid {:item true :xs 2}\n     [button\n      {:variant \"contained\" \n       :style {:height \"100%\"}\n       :on-click (fn []\n                  (if (or (= (count @string1) 0) (= (count @string2) 0))\n                    (reset! result \"Enter Input\")\n                    (GET (url-generator @string1 @string2)\n                     {:eror-handler error-handler\n                      :handler (fn [response] (reset! result response))})\n\n                    ) \n                   )\n       } \n      \"Submit\"\n      ]\n     ]\n    ]\n   [grid {:container true :spacing 1 :style {:margin-top \"2px\"}}\n    [grid {:item true :xs 4}\n     (result-badge  @result)]]\n   ])\n\n(dom/render [Application] (js/document.getElementById \"app\"))\n\n(defn init []\n  (println \"App initialization!\"))"]}